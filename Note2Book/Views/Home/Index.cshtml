@using Note2Book.Data
@model Note2Book.ViewModels.HomeViewModel

<link rel="stylesheet" type="text/css" href="/lib/slick-1.8.1/slick/slick.css"/>
<link rel="stylesheet" type="text/css" href="/lib/slick-1.8.1/slick/slick-theme.css"/>

<script type="text/javascript" src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script type="text/javascript" src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
<script type="text/javascript" src="/lib/slick-1.8.1/slick/slick.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@latest"></script>
<script src="https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js"></script>

@{
    ViewData["Title"] = "Home Page";
    string activeTab = "favorites"; // Default tab
}

<div class="tabs-container">
    <ul class="tabs">
        <li>
            <button class="tab-button @(activeTab == "calendar" ? "active" : "")" onclick="setActiveTab('calendar')">
                Календарь
        <li>
            <button class="tab-button @(activeTab == "favorites" ? "active" : "")" onclick="setActiveTab('favorites')">
                Избранные
            </button>
        </li>
            </button>
        </li>
        <li>
            <button class="tab-button @(activeTab == "status" ? "active" : "")" onclick="setActiveTab('status')">
                Статус
            </button>
        </li>
        <li>
            <button class="tab-button @(activeTab == "profile" ? "active" : "")" onclick="setActiveTab('profile')">
                Профиль
            </button>
        </li>
    </ul>
</div>

<div class="tab-content">
    <div id="favorites" class="tab-pane @(activeTab == "favorites" ? "active-pane" : "hidden-pane")">
        <div class="favorite-slider">
            @foreach (var favorite in Model.FavoriteBooks)
            {
                <div class="slider-item">
                    <img src="@favorite.Image">
                    <p>@favorite.Author.LastName @favorite.Author.Name</p>
                </div>
            }
        </div>
    </div>
    <div id="calendar" class="tab-pane @(activeTab == "calendar" ? "active-pane" : "hidden-pane")"
         style="width: 60%; justify-self: center">
        <canvas id="calendarChart"></canvas>
    </div>
    <div id="status" class=" status-container tab-pane @(activeTab == "status" ? "active-pane" : "hidden-pane")">
        <div class="status-container">
            @foreach (var status in new[] { ("Хочу", UserBook.WillRead), ("Читаю", UserBook.Reading), ("Прочитал", UserBook.Read) })
            {
                <div class="status-column" data-status="@((int)status.Item2)">
                    <h3>@status.Item1</h3>
                    <div class="book-list" id="list-@status.Item1" ondrop="onDrop(event)" ondragover="onDragOver(event)">
                        @foreach (var book in Model.BookStatus.Where(c => c.UserBook == status.Item2))
                        {
                            <div class="book-item" draggable="true" onclick="onBookClick(@book.Book.Id)" ondragstart="onDragStart(event)" data-book-id="@book.Book.Id">
                                    <img src="@book.Book.Image" style="width: 100px" draggable="true" ondragstart="onDragStart(event)" data-book-id="@book.Book.Id">
                                    <p>@book.Book.Author.LastName @book.Book.Author.Name</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <div id="profile" class="tab-pane @(activeTab == "profile" ? "active-pane" : "hidden-pane")" style="margin-bottom: 50px">
        <div class="profile-container">
            <h2 style="margin-bottom: 20px">Привет, секси-гёрл @Model.User.Name</h2>
            <form id="profileForm" enctype="multipart/form-data">
                <div class="profile-image-container">
                    <img id="profileImage" src='@(string.IsNullOrEmpty(Model.User.ProfileImage) ? "/images/profiles/0c481701-6868-491f-887d-a07684de0d35_photo_2023-04-05_13-34-22.jpg" : Model.User.ProfileImage)' alt="Фото профиля" class="profile-image" />
                    <input type="file" id="profileImageInput" name="profileImage" accept="image/*" style="display: none;" />
                    <button type="button" class="upload-button" onclick="document.getElementById('profileImageInput').click()">Изменить фото</button>
                </div>
                <input type="text" id="id" name="id" value="@Model.User.Id" hidden/>
                <div class="form-group">
                    <label for="name">Имя:</label>
                    <input type="text" id="name" name="name" value="@Model.User.Name" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="login">Логин:</label>
                    <input type="text" id="login" name="login" value="@Model.User.Login" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="password">Новый пароль:</label>
                    <input type="password" id="password" name="password" class="form-control" />
                </div>
                <button type="submit" class="save-button" style="margin-bottom: 10px">Сохранить изменения</button>
            </form>
        </div>
    </div>
</div>


@functions {

    public class Тest
    {
        public DateTime Date { get; set; }
        public int Count { get; set; }
    }

}

@{
    var currentDate = DateTime.Now;
    var firstDayOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
    var daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);

    var allDays = Enumerable.Range(0, daysInMonth)
        .Select(i => new Тest { Date = firstDayOfMonth.AddDays(i), Count = 0 })
        .ToList();

    foreach (var activity in Model.Activities)
    {
        var matchingDay = allDays.FirstOrDefault(d => d.Date.Date == activity.CreatedAt.Date);
        if (matchingDay != null)
        {
            matchingDay.Count += 1;
        }
    }

    var matrixData = allDays.Select((d) => new
    {
        x = (int)d.Date.DayOfWeek, // Столбец: День недели (0 - воскресенье, 6 - суббота)
        y = (int)((d.Date.Day - 1 + (int)firstDayOfMonth.DayOfWeek) / 7), // Строка: Неделя месяца
        v = d.Count, // Количество активностей
        date = d.Date.ToString("dd.MM") // Дата для всплывающих подсказок
    }).ToList();
}

<script>
    const matrixData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(matrixData));
    const ctx = document.getElementById('calendarChart').getContext('2d');
    const calendarChart = new Chart(ctx, {
        type: 'matrix',
        data: {
            datasets: [{
                label: 'Активности',
                data: matrixData,
                backgroundColor: (context) => {
                    const value = context.dataset.data[context.dataIndex].v;
                    return value === 0
                        ? 'rgba(200, 200, 200, 0.8)' // Серый цвет для дней без активности
                        : value > 5
                            ? 'rgba(34, 139, 34, 0.8)' // Зелёный для активных дней
                            : 'rgba(144, 238, 144, 0.8)'; // Светло-зелёный для средней активности
                },
                borderColor: 'rgba(0, 0, 0, 0.1)',
                borderWidth: 0,
                width: 95, // Ширина прямоугольников
                height: 50 // Высота прямоугольников
            }]
        },
        options: {
            plugins: {
                tooltip: {
                    callbacks: {
                        title: (tooltipItems) => `Дата: ${tooltipItems[0].raw.date}`,
                        label: (tooltipItem) => `Активности: ${tooltipItem.raw.v}`
                    }
                }
            },
            scales: {
                x: {
                    type: 'linear',
                    position: 'top',
                    offset: true,
                    ticks: {
                        callback: (value) => [ 'Вос', 'Пон', 'Вт', 'Ср', 'Чт', 'Пят', 'Суб'][value],
                        stepSize: 1,
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                    },
                },
                y: {
                    type: 'linear',
                    ticks: {
                        stepSize: 1,
                        callback: (value) => `${value + 1}`
                    },
                    offset: true,
                    grid: {
                        display: false,
                        drawBorder: false,
                    }
                }
            },
            layout: {
                padding: {
                    top: 20, // Отступ сверху
                    left: 0,
                    right: 0,
                    bottom: 0
                }
            }
        }
    });
    
    function onBookClick(bookId) {
        location.href="/Book/" + bookId;
    }

    function setActiveTab(tabName) {
        // Hide all tab panes
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.add('hidden-pane');
            pane.classList.remove('active-pane');
        });

        // Show the selected tab pane
        const selectedPane = document.getElementById(tabName);
        if (selectedPane) {
            selectedPane.classList.remove('hidden-pane');
            selectedPane.classList.add('active-pane');
        }

        // Update active tab button styles
        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
        const activeButton = document.querySelector(`[onclick="setActiveTab('${tabName}')"]`);
        if (activeButton) {
            activeButton.classList.add('active');
        }
    }

    console.log("Яна милаха");
    $('.favorite-slider').slick({
        slidesToShow: 3,
        responsive: [
            {
                breakpoint: 768,
                settings: {
                    arrows: true,
                    centerMode: true,
                    centerPadding: '40px',
                    slidesToShow: 2
                }
            },
            {
                breakpoint: 480,
                settings: {
                    arrows: true,
                    centerMode: true,
                    centerPadding: '20px',
                    slidesToShow: 1
                }
            }
        ]
    });

    let draggedBookId = null;

    function onDragStart(event) {
        draggedBookId = event.target.dataset.bookId;
    }

    function onDragOver(event) {
        event.preventDefault(); // Allow drop
    }

    function onDrop(event) {
        event.preventDefault();
        const targetList = event.target.closest('.book-list');
        if (targetList && draggedBookId) {
            const bookElement = document.querySelector(`.book-item[data-book-id='${draggedBookId}']`);
            targetList.appendChild(bookElement);

            // Update the status on the element
            const newStatus = targetList.closest('.status-column').dataset.status;
            bookElement.dataset.status = newStatus;
            $.ajax({
                url: '@Url.Action("ChangeStatus", "Favorite")',
                type: 'POST',
                data: {bookId: draggedBookId, status: newStatus},
                xhrFields: {
                    withCredentials: true
                },
                success: function (response) {
                },
                error: function () {
                    alert("Произошла ошибка при изменении статуса книги.");
                }
            });
        }
    }

    async function saveChanges() {
        const updatedBooks = [];
        document.querySelectorAll('.book-item').forEach(item => {
            updatedBooks.push({
                id: item.dataset.bookId,
                status: item.closest('.status-column').dataset.status
            });
        });

        // Send updated statuses to the server
        const response = await fetch('/api/books/update-status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedBooks)
        });

        if (response.ok) {
            alert('Изменения сохранены!');
        } else {
            alert('Ошибка при сохранении изменений.');
        }
    }

    document.getElementById('profileImageInput').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('profileImage').src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    // Отправка формы
    document.getElementById('profileForm').addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(this);

        fetch('/User/Update', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Изменения сохранены!');
                } else {
                    alert('Ошибка при сохранении изменений.');
                }
            })
            .catch(error => {
                console.error('Ошибка:', error);
            });
    });
</script>

<style>
    .tabs-container {
        margin-bottom: 20px;
    }

    .tabs {
        display: flex;
        justify-content: center;
        list-style-type: none;
        padding: 0;
    }

    .tab-button {
        margin: 0 10px;
        padding: 10px 20px;
        font-size: 1rem;
        background-color: #f0f0f0;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .tab-button.active {
        background-color: #6A0dad;
        color: white;
    }

    .tab-content {
        padding-top: 31px;
        margin-top: 20px;
    }

    .tab-pane {
        display: none;
    }

    .tab-pane.active-pane {
        display: block;
    }


    .favorite-slider {
        width: 70%;
        margin: 0 auto;
    }

    .slider-item {
        text-align: center;
        padding: 40px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100vw;
    }

    .slider-item img {
        height: 250px;
        margin: 0 auto;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .slider-item h5 {
        font-size: 1.2rem;
        color: #4B0082;
    }

    .slider-item p {
        color: #555;
        font-size: 0.9rem;
    }

    /* Slick Slider */
    .slick-prev:before,
    .slick-next:before {
        color: #4B0082; /* Цвет стрелок слайдера */
    }
    
    .slick-active {
        height: 260px;
    }

    .status-container {
        display: flex;
        gap: 20px;
        justify-content: space-around;
    }

    .status-column {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        background-color: #f9f9f9;
    }

    .status-column h3 {
        text-align: center;
        color: #333;
    }

    .book-list {
        min-height: 90%;
        padding: 10px;
        border-radius: 5px;
    }

    .book-item {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        cursor: move;
        text-align: center;
    }

    .book-item:active {
        background-color: #ccc;
    }

     .profile-container {
         max-width: 600px;
         margin: 0 auto;
         padding: 20px;
         background-color: #fff;
         border-radius: 10px;
         box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
     }

    .profile-image-container {
        text-align: center;
        margin-bottom: 20px;
    }

    .profile-image {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #6A0dad;
    }

    .upload-button {
        display: block;
        margin: 10px auto;
        padding: 10px 20px;
        background-color: #6A0dad;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .upload-button:hover {
        background-color: #5a0a9d;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .save-button {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #6A0dad;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .save-button:hover {
        background-color: #5a0a9d;
    }
</style>
